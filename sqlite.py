from asyncio.windows_events import NULL
import sqlite3 as sq3  # importaria la libreria sqlite

con = sq3.connect('mi_db.db') # creando la conexion
cur = con.cursor() # creando el vehiculo para transmitir info

instrucion1 = ''' CREATE TABLE IF NOT EXISTS escuelas (
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    nombre VARCHAR(45) DEFAULT NULL,
    localidad VARCHAR(45) DEFAULT NULL,
    provincia VARCHAR(45) DEFAULT NULL,
    capacidad INTEGER DEFAULT NULL)'''

instrucion2 ='''
    CREATE TABLE IF NOT EXISTS alumnos (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	id_escuela INTEGER DEFAULT NULL,
	legajo INTEGER DEFAULT NULL,
	apellido VARCHAR(50) DEFAULT NULL,
	nombre VARCHAR(50) DEFAULT NULL,
	nota DECIMAL(10,0) DEFAULT NULL,
	grado INTEGER DEFAULT NULL,
	email VARCHAR(50) DEFAULT NULL,
	FOREIGN KEY (id_escuela) REFERENCES escuelas(id))
'''

cur.execute(instrucion1)
cur.execute(instrucion2)

lista1 = [(1,'Carlos Guido y Spano','Ciudad de Buenos Aires','Buenos Aires',1250),(2,'Paula Albarracín de Sarmiento','Tres Arroyos','Buenos Aires',1100),(3,'Escuela Nro.392','Sijan','Catamarca',250),(4,'General Las Heras','Las Heras','Córdoba',1500),(5,'Gdor. Valentín Virasoro','Goya','Corrientes',750),(6,'E.E.P. Nro.852','El Sauzalito','Chaco',452),(7,'Tutú Maramba','Sarmiento','Chubut',356),(8,'Justo José de Urquiza','Colonia San Jorge','Entre Ríos',365),(9,'Sor Clotilde León', 'Clorinda', 'Formosa', 484),(10,'Escuela Nro.264','General Pico','La Pampa',652)]

lista2 = [(1, 8, 1035, 'Glandon', 'Aili', 10, 3, 'aglandon0@people.com.cn'),(2, 10, 1036, 'O''Carran', 'Davidson', 8, 3, 'docarran1@howstuffworks.com'),(3, 3, 1037, 'MacGiolla Pheadair', 'Godfry', 5, 6, 'gmacgiollapheadair2@deviantart.com'),(4, 9, 1038, 'Hame', 'Nesta', 9, 6, 'nhame3@seesaa.net'),(5, 6, 1039, 'Plume', 'Agna', 6, 3, 'aplume4@slate.com'),(6, 8, 1040, 'Scholl', 'Falkner', 8, 2, 'fscholl5@netvibes.com'),(7, 9, 1041, 'Shevelin', 'Artus', 4, 5, 'ashevelin6@nasa.gov'),(8, 10, 1042, 'Colleford', 'Debby', 10, 7, 'dcolleford7@hatena.ne.jp'),(9, 5, 1043, 'Aickin', 'Giacopo', 10, 5, 'gaickin8@seattletimes.com'),(10, 10, 1044, 'Cammomile', 'Lorri', 6, 5, 'lcammomile9@etsy.com'),(11, 5, 1045, 'Wharby', 'Tara', 6, 5, 'twharbya@dedecms.com'),(12, 5, 1046, 'Inman', 'Aimil', 7, 6, 'ainmanb@example.com'),(13, 2, 1047, 'Bakes', 'Sascha', 3, 3, 'sbakesc@tumblr.com'),(14, 2, 1048, 'Dismore', 'Ursola', 1, 5, 'udismored@theguardian.com'),(15, 4, 1049, 'Josling', 'Delcina', 3, 3, 'djoslinge@soup.io'),(16, 2, 1050, 'Scrannage', 'Chip', 2, 5, 'cscrannagef@squarespace.com'),(17, 3, 1051, 'Bakes', 'Sumner', 7, 3, 'sbakesg@bloglines.com'),(18, 4, 1052, 'Fleeman', 'Crysta', 5, 2, 'cfleemanh@ihg.com'),(19, 6, 1053, 'Fitchet', 'Nerty', 8, 1, 'nfitcheti@dagondesign.com'),(20, 5, 1054, 'Legister', 'Marcie', 7, 6, 'mlegisterj@wisc.edu'),(21, 6, 1055, 'Stading', 'Judas', 9, 7, 'jstadingk@prweb.com'),(22, 7, 1056, 'Jouannisson', 'Nonie', 6, 6, 'njouannissonl@sitemeter.com'),(23, 5, 1057, 'Corfield', 'Anny', 1, 3, 'acorfieldm@merriam-webster.com'),(24, 10, 1058, 'Harte', 'Umberto', 1, 5, 'uharten@paypal.com'),(25, 10, 1059, 'Brownsett', 'Tabbie', 9, 3, 'tbrownsetto@mit.edu'),(26, 7, 1060, 'Abrahami', 'Hadley', 7, 3, 'habrahamip@wordpress.org'),(27, 4, 1061, 'Fonquernie', 'Domeniga', 1, 6, 'dfonquernieq@jimdo.com'),(28, 9, 1062, 'Ledwitch', 'Yule', 7, 4, 'yledwitchr@nbcnews.com'),(29, 6, 1063, 'Forward', 'Bartie', 3, 2, 'bforwards@bigcartel.com'),(30, 5, 1064, 'Sugge', 'Tally', 4, 2, 'tsugget@blog.com'),(31, 5, 1065, 'Casazza', 'Simonne', 6, 5, 'scasazzau@example.com'),(32, 3, 1066, 'Andrioli', 'Melinde', 6, 1, 'mandrioliv@tinypic.com'),(33, 6, 1067, 'Caldecot', 'Darb', 6, 1, 'dcaldecotw@tmall.com'),(34, 6, 1068, 'Fronczak', 'Chelsea', 6, 3, 'cfronczakx@wunderground.com'),(35, 6, 1069, 'Hardes', 'Frederic', 7, 5, 'fhardesy@diigo.com'),(36, 3, 1070, 'Worthington', 'Chrotoem', 5, 6, 'cworthingtonz@linkedin.com'),(37, 2, 1071, 'Gudgion', 'Aveline', 5, 6, 'agudgion10@msu.edu'),(38, 8, 1072, 'Haythorne', 'Sapphira', 1, 1, 'shaythorne11@nhs.uk'),(39, 2, 1073, 'Loalday', 'Burk', 6, 7, 'bloalday12@cornell.edu'),(40, 3, 1074, 'Lamperd', 'Melinda', 3, 6, 'mlamperd13@ehow.com'),(41, 3, 1075, 'Figurski', 'Howey', 5, 5, 'hfigurski14@tuttocitta.it'),(42, 9, 1076, 'Weaving', 'Reggie', 10, 6, 'rweaving15@discovery.com'),(43, 7, 1077, 'Boxhill', 'Jarib', 9, 7, 'jboxhill16@nyu.edu'),(44, 9, 1078, 'Grahl', 'Izaak', 6, 2, 'igrahl17@sphinn.com'),(45, 3, 1079, 'Agett', 'Vinnie', 2, 7, 'vagett18@vistaprint.com'),(46, 9, 1080, 'Densell', 'Sibyl', 9, 1, 'sdensell19@quantcast.com'),(47, 1, 1081, 'Addionisio', 'Adoree', 5, 2, 'aaddionisio1a@myspace.com'),(48, 4, 1082, 'De Mars', 'Kelcy', 8, 7, 'kdemars1b@patch.com'),(49, 3, 1083, 'O''Monahan', 'Doretta', 2, 3, 'domonahan1c@creativecommons.org'),(50, 9, 1084, 'L'' Anglois', 'Chris', 10, 6, 'clanglois1d@state.gov'),(51, 5, 1085, 'Symcock', 'Arthur', 1, 4, 'asymcock1e@mashable.com'),(52, 5, 1086, 'Ennals', 'Shandy', 1, 5, 'sennals1f@irs.gov'),(53, 8, 1087, 'Gummary', 'Michel', 4, 4, 'mgummary1g@hp.com'),(54, 2, 1088, 'Domerque', 'Doro', 10, 6, 'ddomerque1h@clickbank.net'),(55, 6, 1089, 'Dumbar', 'Sawyere', 4, 4, 'sdumbar1i@google.cn'),(56, 7, 1090, 'MacHoste', 'Randal', 5, 3, 'rmachoste1j@livejournal.com'),(57, 1, 1091, 'Lorryman', 'Edvard', 2, 4, 'elorryman1k@state.tx.us'),(58, 1, 1092, 'Foltin', 'Mitchel', 8, 1, 'mfoltin1l@google.de'),(59, 10, 1093, 'Malin', 'Wood', 8, 6, 'wmalin1m@squidoo.com'),(60, 9, 1094, 'McQuilkin', 'Chrysa', 7, 1, 'cmcquilkin1n@free.fr'),(61, 4, 1095, 'McGarrahan', 'Sari', 3, 4, 'smcgarrahan1o@eventbrite.com'),(62, 5, 1096, 'Codman', 'Lynelle', 9, 6, 'lcodman1p@github.io'),(63, 9, 1097, 'Houtby', 'Myer', 6, 7, 'mhoutby1q@imgur.com'),(64, 1, 1098, 'Corre', 'Ebenezer', 5, 4, 'ecorre1r@comsenz.com'),(65, 6, 1099, 'Placstone', 'Aurel', 4, 4, 'aplacstone1s@state.gov'),(66, 1, 1100, 'Hinze', 'Yale', 4, 5, 'yhinze1t@skyrock.com'),(67, 6, 1101, 'McKeowon', 'Marlene', 6, 2, 'mmckeowon1u@house.gov'),(68, 10, 1102, 'Verryan', 'Zilvia', 6, 3, 'zverryan1v@yellowpages.com'),(69, 1, 1103, 'Burchatt', 'Jelene', 10, 3, 'jburchatt1w@narod.ru'),(70, 1, 1104, 'Full', 'Maurizia', 8, 2, 'mfull1x@nifty.com'),(71, 7, 1105, 'McNellis', 'Willi', 5, 6, 'wmcnellis1y@cnet.com'),(72, 3, 1106, 'Pinchbeck', 'Abigail', 7, 4, 'apinchbeck1z@uol.com.br'),(73, 1, 1107, 'Sandaver', 'Traver', 9, 1, 'tsandaver20@mit.edu'),(74, 6, 1108, 'Thomlinson', 'Netty', 4, 7, 'nthomlinson21@techcrunch.com'),(75, 2, 1109, 'Daile', 'Rip', 8, 6, 'rdaile22@toplist.cz'),(76, 1, 1110, 'Lamplugh', 'Andie', 3, 3, 'alamplugh23@1688.com'),(77, 7, 1111, 'Haddick', 'Joly', 3, 3, 'jhaddick24@stumbleupon.com'),(78, 2, 1112, 'Noyce', 'Brice', 9, 1, 'bnoyce25@gmpg.org'),(79, 1, 1113, 'Halfacree', 'Borg', 10, 5, 'bhalfacree26@wordpress.org'),(80, 2, 1114, 'D''Acth', 'Alphonso', 4, 6, 'adacth27@g.co'),(81, 10, 1115, 'Barme', 'Patrizio', 10, 7, 'pbarme28@slashdot.org'),(82, 1, 1116, 'Abramovic', 'Starlene', 7, 2, 'sabramovic29@shareasale.com'),(83, 6, 1117, 'Beirne', 'Fax', 4, 6, 'fbeirne2a@cocolog-nifty.com'),(84, 6, 1118, 'Heskin', 'Reg', 7, 4, 'rheskin2b@amazon.co.uk'),(85, 10, 1119, 'Chapelhow', 'Arabela', 2, 2, 'achapelhow2c@flavors.me'),(86, 2, 1120, 'Mariot', 'Kay', 9, 7, 'kmariot2d@nhs.uk'),(87, 1, 1121, 'Roddam', 'Ethyl', 4, 4, 'eroddam2e@wisc.edu'),(88, 1, 1122, 'Kearn', 'Andonis', 9, 2, 'akearn2f@buzzfeed.com'),(89, 4, 1123, 'Partrick', 'Barnett', 10, 7, 'bpartrick2g@cpanel.net'),(90, 5, 1124, 'Brise', 'Richmound', 6, 5, 'rbrise2h@dyndns.org'),(91, 3, 1125, 'Compfort', 'Sherm', 5, 7, 'scompfort2i@example.com'),(92, 6, 1126, 'Giorgini', 'Gennie', 5, 4, 'ggiorgini2j@mtv.com'),(93, 3, 1127, 'MacAlpin', 'Wandis', 7, 5, 'wmacalpin2k@technorati.com'),(94, 1, 1128, 'Elnor', 'Lane', 1, 3, 'lelnor2l@goo.gl'),(95, 2, 1129, 'Deport', 'Alessandra', 7, 3, 'adeport2m@toplist.cz'),(96, 9, 1130, 'O''Currane', 'Judah', 8, 1, 'jocurrane2n@shutterfly.com'),(97, 8, 1131, 'Armitage', 'Salvatore', 2, 2, 'sarmitage2o@wikimedia.org'),(98, 5, 1132, 'Malcolmson', 'Mick', 9, 5, 'mmalcolmson2p@cbslocal.com'),(99, 3, 1133, 'Dimitriou', 'Pate', 1, 4, 'pdimitriou2q@epa.gov'),(100, 7, 1134, 'Seckom', 'Seward', 8, 1, 'sseckom2r@wikispaces.com')]

cur.executemany('INSERT INTO escuelas VALUES (?,?,?,?,?)', lista1)
cur.executemany('INSERT INTO alumnos VALUES (?,?,?,?,?,?,?,?)', lista2)

con.commit() # confirmar transaccion
con.close()  # cerrando la conexion

# en dado caso no pase el id dentro del registro
#cur.executemany('INSERT INTO escuelas(nombre, localidad, provincia, capacidad) VALUES (?,?,?,?)', lista1)
#cur.executemany('INSERT INTO escuelas(id, nombre) VALUES (?,?)', lista1)
